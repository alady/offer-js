/*
题目描述:
输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。
假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，
但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）
******************************************************************************************************************************
解题思路:
1 额外使用一个数组，起到栈的作用，然后来模拟压栈序列的弹出。
2 将pushV循环依次压入该数组，每压入一次，与popV的元素做对比，
若一致，则弹出，popV的元素后移，继续对比，一直到popV的元素与当前栈的最后一个元素不一致为止，进行下一个循环
3 如此，循环结束后数组中无元素，说明该弹出序列正确；若仍有元素，则说明该弹出序列不正确。
*/


function IsPopOrder(pushV, popV)
{
    let bool = false;
    let len = pushV.length;
    let stack = [];
    for(let i = 0, j = 0; i<len; i++){
        stack.push(pushV[i]);
        while(j < len && stack[stack.length-1] == popV[j]){
            j++;
            stack.pop();
        }
    }
    if(stack.length == 0){
        bool = true;
    }
    return bool;
}
